#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# All of these stats and only these stats should be included in the
# various UIs as noted.
# each line is of the following format:
# VARIABLE WHERE
#   VARIABLE is the manager variable
#   WHERE is concatenated string consisting of one or more of 
#     "M" - must be present in MIB
#     "H" - must be present in HTML
#     "C" - must be present in CLI
#     "P" - must be present in NT Perfmon
#     "I" - internal use only. doesn't appear in UI
#
#     No data for WHERE field means must be present in ALL interfaces,
#     but this file will expand, so consider this field mandatory in
#     the near future.
#
#  In the section following the "VARIABLE WHERE" are one or more 
#  lines of description about the stat:
#  Stat:
#    type (float, integer)
#    usage (counter, gauge)
#    max range scale (used for NT perfmon.  
#       Display range is 0-100 by default (100 is maximum value of range)
#       Scale factor for use in perfmon is: log10(100/MAX_RANGE_SCALE)
#	This is just an initial default so pick a scale that will show
#	something meaningful in the average case.)
#    units (e.g. bytes, kb/sec, %)
#    name of variable in traffic server, e.g "proxy.node...." (Key field)
#      this is specified in the "VARIABLE WHERE" information
#    perfmon structure variable name (used for NT perfmon)
#    short doc - description for scrolling list
#    documentation - description for the humans
#    traffic server enumerated value (?)
#
#  relationships
#   Stat is present in UI
#     1->1.  Statistic is used in UI.  This serves as a cross-reference
#     check.  This is present in the "VARIABLE WHERE" information
#   Stat is derived from Stat
#     1->N with link attribute "derived" that describes how the stat is
#     computed.
#   Stat is member of Subsystem
#     1->1.  Not used.
#   Stat is member of Atomic Update Group
#     1->1.  The values of all statistics in atomic update group take on
#     their new values at same time.
#
#---these are missing from UI...
proxy.node.nntp.upstream_total_bytes M
proxy.node.nntp.downstream_total_bytes M
proxy.cluster.nntp.upstream_total_bytes M
proxy.cluster.nntp.downstream_total_bytes M
#----
#
# html/everything.ink
proxy.node.cache_total_hits
# derived: sum of proxy.process.http.cache_hit_fresh, proxy.process.http.cache_hit_revalidated, proxy.process.ftp.cache_hits, proxy.process.nntp.cache_hit_fresh
# usage: counter
# units: objects
# scale: 1000
# doc: # of objects served from cache
# perfmonvar: cache_total_hits
proxy.node.cache_total_misses
# derived: sum of proxy.process.http.cache_miss_cold, proxy.process.http.cache_miss_changed, proxy.process.http.cache_miss_not_cacheable,  proxy.process.http.cache_miss_client_no_cache, proxy.process.ftp.cache_misses, proxy.process.nntp.cache_miss_cold
# usage: counter
# units: objects
# scale: 1000
# doc: # of objects not found in cache
# perfmonvar: cache_total_misses
proxy.cluster.cache_total_hits 
# derived: cluster aggregate of proxy.node.cache_total_hits
# usage: counter
# units: objects
# scale: 1000
# doc: # of objects served from cache (cluster)
# shortdoc: # objects srvd frm cache (cluster)
# perfmonvar: cluster_cache_total_hits
proxy.cluster.cache_total_misses
# derived: cluster aggregate of proxy.node.cache_total_misses
# usage: counter
# units: objects
# scale: 1000
# doc: # of objects not found in cache (cluster)
# shortdoc: # objects not fnd in cache (clster)
# perfmonvar: cluster_cache_total_misses
#
# html/dashboard.stats.ink
proxy.node.http.current_parent_proxy_connections
# usage: gauge
# units: connections
# scale: 100
# doc: # of open connections to HTTP parent proxies
# shortdoc: # open conn to HTTP parent proxies
# perfmonvar: cur_parent_proxy_conn
#
proxy.node.nntp.current_client_connections
# usage: gauge
# units: connections
# scale: 100
# doc: # of open connections to NNTP clients
# shortdoc: # open conn to NNTP clients
# perfmonvar: cur_nntp_client_conn
#
proxy.node.nntp.current_server_connections
# usage: gauge
# units: connections
# scale: 100
# doc: # of open connections to NNTP servers
# shortdoc: # open conn to NNTP servers
# perfmonvar: cur_nntp_server_conn
#
proxy.node.current_cache_connections
# usage: gauge
# units: connections
# scale: 100
# doc: # of open connections to the cache
# perfmonvar: cur_cache_conn
#
proxy.node.current_client_connections
# usage: gauge
# units: connections
# scale: 100
# doc: # of open connections to clients
# perfmonvar: cur_client_conn
#
proxy.node.current_server_connections
# usage: gauge
# units: connections
# scale: 100
# doc: # of open connections to servers
# perfmonvar: cur_server_conn
#
proxy.cluster.http.current_parent_proxy_connections
# derived: cluster aggregate of proxy.node.http.current_parent_proxy_connections
# usage: gauge
# units: connections
# scale: 100
# doc: # of open connections to HTTP parent proxies (cluster)
# shortdoc: # open con to HTTP prnt prxies (cluster)
# perfmonvar: cluster_cur_parent_proxy_conn
#
proxy.cluster.nntp.current_client_connections
# derived: cluster aggregate of proxy.node.nntp.current_client_connections
# usage: gauge
# units: connections
# scale: 100
# doc: # of open connections to NNTP clients (cluster)
# shortdoc: # open conn to NNTP clnts (cluster)
# perfmonvar: cluster_cur_nntp_client_conn
#
proxy.cluster.nntp.current_server_connections
# derived: cluster aggregate of proxy.node.nntp.current_server_connections
# usage: gauge
# units: connections
# scale: 100
# doc: # of open connections to NNTP servers
# shortdoc: # open conn to NNTP srvrs (cluster)
# perfmonvar: cluster_cur_nntp_server_conn
#
proxy.cluster.current_cache_connections
# derived: cluster aggregate of proxy.node.current_cache_connections
# usage: gauge
# units: connections
# scale: 100
# doc: # of open connections to the cache (cluster)
# shortdoc: # open conn to the cache (cluster)
# perfmonvar: cluster_cur_cache_conn
#
proxy.cluster.current_client_connections
# derived: cluster aggregate of proxy.node.current_client_connections
# usage: gauge
# units: connections
# scale: 100
# doc: # of open connections to clients (cluster)
# shortdoc: # open conn to clients (cluster)
# perfmonvar: cluster_cur_client_conn
#
proxy.cluster.current_server_connections
# derived: cluster aggregate of proxy.node.current_server_connections
# usage: gauge
# units: connections
# scale: 100
# doc: # of open connections to servers (cluster)
# shortdoc: # open conn to servers (cluster)
# perfmonvar: cluster_cur_server_conn
#
proxy.node.bandwidth_hit_ratio CH
# doc: The ratio of bytes served from the cache to total requested bytes (HTTP and FTP) since installation).
# proxy.node.http.user_agent_total_request_bytes = proxy.process.http.user_agent_request_document_total_size + proxy.process.http.user_agent_request_header_total_size
# proxy.node.http.user_agent_total_response_bytes = proxy.process.http.user_agent_response_document_total_size + proxy.process.http.user_agent_response_header_total_size
# proxy.node.nntp.upstream_total_bytes = proxy.process.nntp.upstream.request_bytes + proxy.process.nntp.upstream.response_bytes
# proxy.node.http.origin_server_total_request_bytes = proxy.process.http.origin_server_request_document_total_size + proxy.process.http.origin_server_request_header_total_size
# proxy.node.http.origin_server_total_response_bytes = proxy.process.http.origin_server_response_document_total_size + proxy.process.http.origin_server_response_header_total_size
# proxy.node.nntp.downstream_total_bytes = proxy.process.nntp.downstream.request_bytes + proxy.process.nntp.downstream.response_bytes
# UA_bytes = proxy.node.http.user_agent_total_request_bytes + proxy.node.http.user_agent_total_response_bytes + proxy.node.nntp.upstream_total_bytes
# OS_bytes = proxy.node.http.origin_server_total_request_bytes + proxy.node.http.origin_server_total_response_bytes + proxy.node.nntp.downstream_total_bytes
# PP_bytes = 0
# result = (UA_bytes - (OS_bytes + PP_bytes)) / UA_bytes
proxy.cluster.bandwidth_hit_ratio CH
# units: %
# scale: 100
proxy.node.cache_hit_ratio CH
# units: %
# scale: 100
# usage: gauge
proxy.cluster.cache_hit_ratio CH
# units: %
# scale: 100
# usage: gauge
proxy.node.client_throughput_out CH
# doc: Number of HTTP and FTP bytes per second through node (and cluster).
# usage: gauge
# units: bytes/second
# scale: 100000
proxy.cluster.client_throughput_out CH
# units: %
# scale: 100
# usage: gauge
proxy.cluster.cache.bytes_free CH
# units: %
# scale: 100
# usage: gauge
proxy.cluster.cache.percent_free CH
# units: %
# scale: 100
# usage: gauge
proxy.cluster.dns.lookups_per_second
# derived: cluster aggregate of proxy.node.dns.lookups_per_second
# usage: gauge
# units: operations/second
# scale: 100
# doc: # of DNS lookups/second (cluster)
# perfmonvar: cluster_dns_lookups_per_second
#
proxy.cluster.dns.total_dns_lookups
# derived: cluster aggregate of proxy.node.dns.total_dns_lookups
# usage: gauge
# units: operations
# scale: 10000
# doc: total # of DNS lookups (cluster)
# perfmonvar: cluster_total_dns_lookups
#
proxy.cluster.hostdb.hit_ratio CH
# doc: Ratio of host database hits to total host database lookups, since installation.
# usage: gauge
# units: %
# scale: 100
proxy.cluster.http.bandwidth_hit_ratio CH
# units: %
# scale: 100
# usage: gauge
proxy.cluster.http.cache_current_connections_count D
proxy.cluster.http.cache_hit_ratio CH
# units: %
# scale: 100
# usage: gauge
proxy.cluster.http.cache_total_hits I
proxy.cluster.http.origin_server_current_connections_count
# usage: gauge
# units: connection
# scale: 100
# doc: The number of currently open HTTP server connections (cluster)
# perfmonvar: cur_http_origin_server_conn
#
proxy.cluster.http.origin_server_total_response_bytes I
proxy.cluster.http.origin_server_total_transactions_count D
proxy.cluster.http.throughput
# usage: gauge
# units: bytes/second
# scale: 10000000
# doc: HTTP throughput bytes/second (cluster)
# perfmonvar: cluster_http_throughput
#
proxy.cluster.http.user_agent_current_connections_count
# doc: Number of currently open HTTP and FTP client connections (cluster).
# shortdoc: # cur open HTTP & FTP cli conn (clstr)
# scale: 100
# units: connections
# usage: gauge
# perfmonvar: cluster_cur_http_ua_conn
proxy.cluster.http.user_agent_total_response_bytes I
proxy.cluster.http.user_agent_xacts_per_second
# derived: cluster aggregate of proxy.node.http.user_agent_xacts_per_second
# usage: gauge
# units: transactions/second
# scale: 1000
# doc: user agent transactions/second (cluster)
# shortdoc: user agt xacts/s (cluster)
# perfmonvar: cluster_http_ua_xacts_sec
proxy.cluster.http.user_agents_total_transactions_count D
proxy.node.cache.bytes_free CH
proxy.node.cache.percent_free CH
proxy.node.dns.lookups_per_second
# usage: gauge
# units: operations/second
# scale: 100
# doc: # of DNS lookups/second
# perfmonvar: dns_lookups_per_second
#
#this one appears as proxy.process.dns.total_dns_lookups as well 
proxy.node.dns.total_dns_lookups CH
proxy.node.hostdb.hit_ratio CH
# doc: Ratio of host database hits to total host database lookups, since installation.
# usage: gauge
# units: %
# scale: 100
proxy.node.hostname CH
proxy.node.http.bandwidth_hit_ratio CH
# doc: The ratio of bytes served from the cache to total requested bytes (HTTP and FTP) since installation).
# units: %
# scale: 100
# usage: gauge
proxy.node.http.cache_current_connections_count
# doc: Number of HTTP and FTP cache transfers (cache reads and writes) in progress.
# shortdoc: # HTTP & FTP cache xfrs in prgrss
# scale: 100
# units: connections
# usage: gauge
# perfmonvar: cur_http_cache_conn
proxy.node.http.cache_hit_ratio CH
# doc: Ratio of cache hits to total cache requests (HTTP and FTP), since installation.
# units: %
# scale: 100
# usage: gauge
proxy.node.http.cache_total_hits
# doc: Total number of HTTP and FTP objects served from the cache since installation.
# shortdoc: Tot # HTTP & FTP obj srvd frm cache
# units: documents
# scale: 10000
# usage: counter
# perfmonvar: http_cache_hits_total
proxy.node.http.origin_server_current_connections_count
# doc: Number of currently open HTTP and FTP server connections.
# shortdoc: # cur open HTTP & FTP srvr conn
# scale: 100
# units: connections
# usage: gauge
# perfmonvar: cur_http_os_conn
proxy.node.http.origin_server_total_response_bytes I
proxy.node.http.origin_server_total_transactions_count D
proxy.node.http.throughput
# usage: gauge
# units: bytes/second
# scale: 10000000
# doc: HTTP throughput bytes/second
# perfmonvar: cur_http_throughput
#
proxy.node.http.user_agent_current_connections_count
# doc: Number of currently open HTTP and FTP client connections.
# shortdoc: # cur open HTTP & FTP cli conn
# scale: 100
# units: connections
# usage: gauge
# perfmonvar: cur_http_ua_conn
proxy.node.http.user_agent_total_response_bytes I
proxy.node.http.user_agent_xacts_per_second
# doc: user agent transactions/second
# shortdoc: user agt xacts/s
# usage: gauge
# units: transactions/second
# scale: 100
# perfmonvar: http_ua_xacts_sec
proxy.node.http.user_agents_total_transactions_count D
# doc: Count of incoming HTTP client requests.
# shortdoc: count of incoming HTTP cli rqsts
# perfmonvar: http_ua_total_trans
# usage: counter
# units: transactions
# scale: 1000
# html/protocols.stats.ink
proxy.node.http.transaction_frac_avg_10s.errors.aborts CH
proxy.node.http.transaction_frac_avg_10s.errors.connect_failed CH
proxy.node.http.transaction_frac_avg_10s.errors.early_hangups CH
proxy.node.http.transaction_frac_avg_10s.errors.empty_hangups CH
proxy.node.http.transaction_frac_avg_10s.errors.other CH
proxy.node.http.transaction_frac_avg_10s.errors.possible_aborts CH
proxy.node.http.transaction_frac_avg_10s.errors.pre_accept_hangups CH
proxy.node.http.transaction_frac_avg_10s.hit_fresh CH
proxy.node.http.transaction_frac_avg_10s.hit_revalidated CH
proxy.node.http.transaction_frac_avg_10s.miss_changed CH
proxy.node.http.transaction_frac_avg_10s.miss_client_no_cache CH
proxy.node.http.transaction_frac_avg_10s.miss_cold CH
proxy.node.http.transaction_frac_avg_10s.miss_not_cacheable CH
proxy.node.http.transaction_frac_avg_10s.other.unclassified CH
proxy.node.http.transaction_msec_avg_10s.errors.aborts
proxy.node.http.transaction_msec_avg_10s.errors.connect_failed
proxy.node.http.transaction_msec_avg_10s.errors.early_hangups
proxy.node.http.transaction_msec_avg_10s.errors.empty_hangups
proxy.node.http.transaction_msec_avg_10s.errors.other
proxy.node.http.transaction_msec_avg_10s.errors.possible_aborts
proxy.node.http.transaction_msec_avg_10s.errors.pre_accept_hangups
proxy.node.http.transaction_msec_avg_10s.hit_fresh
proxy.node.http.transaction_msec_avg_10s.hit_revalidated
proxy.node.http.transaction_msec_avg_10s.miss_changed
proxy.node.http.transaction_msec_avg_10s.miss_client_no_cache
proxy.node.http.transaction_msec_avg_10s.miss_cold
proxy.node.http.transaction_msec_avg_10s.miss_not_cacheable
proxy.node.http.transaction_msec_avg_10s.other.unclassified
proxy.process.ftp.connections_currently_open
# doc: Number of open FTP connections
# units: connections
# usage: gauge
# scale: 100
# perfmonvar: cur_ftp_conn
proxy.process.ftp.connections_failed_pasv
# doc: Number of failed PASV FTP connections
# shortdoc: # of failed PASV FTP connections
# units: connections
# usage: counter
# scale: 100
# perfmonvar: ftp_pasv_conn_failed
proxy.process.ftp.connections_failed_port
# doc: Number of failed PORT FTP connections
# shortdoc: # of failed PORT FTP connections
# units: connections
# usage: counter
# scale: 100
# perfmonvar: ftp_port_conn_failed
proxy.process.ftp.connections_successful_pasv
# doc: Number of successful PASV FTP connections
# shortdoc: # of successful PASV FTP conn
# units: connections
# usage: counter
# scale: 100
# perfmonvar: ftp_pasv_conn_sucess
proxy.process.ftp.connections_successful_port
# doc: Number of successful PORT FTP connections
# shortdoc: # of successful PORT FTP conn
# units: connections
# usage: counter
# scale: 100
# perfmonvar: ftp_port_conn_success
proxy.process.http.current_client_connections
# doc: Total HTTP client connections currently active
# shortdoc: Tot HTTP cli conn cur active
# units: connections
# usage: counter
# scale: 100
# perfmonvar: cur_http_client_conn
proxy.process.http.current_client_transactions
# doc: Total HTTP client transactions in progress
# shortdoc: Tot HTTP cli xact in progress
# units: transactions
# usage: gauge
# scale: 100
# perfmonvar: cur_http_client_trans
proxy.process.http.current_server_connections
# doc: Total HTTP server connections currently active
# shortdoc: Tot HTTP srvr conn cur actv
# units: connections
# usage: gauge
# scale: 100
# perfmonvar: cur_http_server_conn
proxy.process.http.current_server_transactions
# doc: Total HTTP server connections in progress
# shortdoc: Tot HTTP srvr conn in progress
# units: transactions
# usage: gauge
# scale: 100
# perfmonvar: cur_http_server_trans
proxy.process.http.origin_server_response_document_total_size
# doc: Total amount of HTTP data received from origin servers since installation.
# shortdoc: Tot HTTP data rcvd from origin
# units: bytes
# usage: counter
# scale: 100000
# perfmonvar: http_os_resp_doc_total
proxy.process.http.origin_server_response_header_total_size
# doc: Total amount of HTTP header data received from origin servers since installation
# shortdoc: Tot HTTP hdr data rcvd from origin
# units: bytes
# usage: counter
# scale: 100000
# perfmonvar: http_os_resp_header_total
proxy.process.http.user_agent_response_document_total_size
# doc: Total amount of HTTP data served to clients since installation
# shortdoc: Tot HTTP data srvd to clients
# units: bytes
# usage: counter
# scale: 100000
# perfmonvar: http_ua_resp_doc_total
proxy.process.http.user_agent_response_header_total_size
# doc: Total amount of HTTP header data served to clients since installation
# shortdoc: Tot HTTP hdr data svrd to clients
# units: bytes
# usage: counter
# scale: 100000
# perfmonvar: http_ua_resp_header_total
proxy.process.icp.cache_lookup_fail
# doc: ICP remote query misses
# units: transactions
# usage: counter
# scale: 10000
# perfmonvar: icp_remote_query_miss
proxy.process.icp.cache_lookup_success
# doc: ICP remote query hits
# units: transactions
# usage: counter
# scale: 10000
# perfmonvar: icp_remote_query_hit
proxy.process.icp.icp_query_hits
# doc: ICP peer HIT responses received
# units: transactions
# usage: counter
# scale: 10000
# perfmonvar: icp_peer_query_hit
proxy.process.icp.icp_query_misses
# doc: ICP peer MISS responses received
# units: transactions
# usage: counter
# scale: 10000
# perfmonvar: icp_peer_query_miss
proxy.process.icp.icp_remote_responses
# doc: ICP responses (HIT/MISS) received
# units: transactions
# usage: counter
# scale: 10000
# perfmonvar: icp_peer_query_responses_received
#
proxy.process.icp.icp_query_requests
# doc: ICP peer queries sent
# units: transactions
# usage: counter
# scale: 10000
# perfmonvar: icp_peer_query_requests
#
proxy.process.icp.icp_remote_query_requests
# doc: ICP queries received
# units: transactions
# usage: counter
# scale: 10000
# perfmonvar: icp_peer_queries_received
#
proxy.process.icp.query_response_write
# doc: ICP responses sent to peers
# units: transactions
# usage: counter
# scale: 10000
# perfmonvar: icp_peer_responses_sent
#
proxy.process.icp.total_icp_request_time
# doc: average response time for ICP subsystem requests
# units: milliseconds
# usage: gauge
# scale: 1000
# perfmonvar: icp_subsystem_avg_request_time
#
proxy.process.icp.total_icp_response_time
# doc: average response time for ICP peer requests
# units: milliseconds
# usage: gauge
# scale: 1000
# perfmonvar: icp_peer_avg_request_time
#
proxy.process.icp.total_udp_send_queries
# doc: total ICP query messages sent to ICP peers
# units: packets
# usage: counter
# scale: 10000
# perfmonvar: total_icp_udp_send_queries
#
proxy.process.nntp.article_hits
# doc: # of NNTP article hits
# units: documents
# usage: counter
# scale: 10000
# perfmonvar: total_nntp_article_hits
#
proxy.process.nntp.article_misses
# doc: # of NNTP articles misses
# units: documents
# usage: counter
# scale: 10000
# perfmonvar: total_nntp_article_misses
#
proxy.process.nntp.client_bytes_read
# doc: # of bytes read from NNTP clients
# units: bytes
# usage: counter
# scale: 10000
# perfmonvar: total_nntp_client_bytes_read
#
proxy.process.nntp.client_bytes_written
# doc: # of bytes written to NNTP clients
# units: bytes
# usage: counter
# scale: 10000
# perfmonvar: total_nntp_client_bytes_written
#
proxy.process.nntp.client_connections_currently_open CH
proxy.process.nntp.feed_bytes
# doc: # of bytes received through NNTP feeds
# units: bytes
# usage: counter
# scale: 10000
# perfmonvar: total_nntp_feed_bytes
#
proxy.process.nntp.group_hits
# doc: # of NNTP group hits
# units: NNTP group hits
# usage: counter
# scale: 100
# perfmonvar: total_nntp_group_hits
#
proxy.process.nntp.group_refreshes
# doc: # of NNTP group refreshes
# units: NNTP group refreshes
# usage: counter
# scale: 100
# perfmonvar: total_nntp_group_refreshes
#
proxy.process.nntp.overview_hits
# doc: # of NNTP overview hits
# units: NNTP overview hits
# usage: counter
# scale: 100
# perfmonvar: total_nntp_overview_hits
#
proxy.process.nntp.overview_refreshes
# doc: Number of NNTP overview refreshes.  An overview refresh occurs when the Traffic Server caches a group overview on demand (as opposed to an overview pull).
# shortdoc: # of NNTP overview refreshes
# units: NNTP overview refreshes
# usage: counter
# scale: 100
# perfmonvar: total_nntp_overview_refreshes
#
proxy.process.nntp.post_bytes
# doc: # of bytes posted through NNTP
# units: bytes
# usage: counter
# scale: 10000
# perfmonvar: total_nntp_post_bytes
#
proxy.process.nntp.posts
# doc: # of articles posted through NNTP
# units: articles
# usage: counter
# scale: 10000
# perfmonvar: total_nntp_posts
#
proxy.process.nntp.pull_bytes
# doc: # of bytes of article/overview pulled through NNTP
# units: bytes
# usage: counter
# scale: 10000
# perfmonvar: total_nntp_pull_bytes
#
proxy.process.nntp.server_bytes_read
# doc: # of bytes read from parent NNTP servers
# units: bytes
# usage: counter
# scale: 10000
# perfmonvar: total_nntp_server_bytes_read
#
proxy.process.nntp.server_bytes_written
# doc: # of bytes written to cache for NNTP
# units: bytes
# usage: counter
# scale: 10000
# perfmonvar: total_nntp_server_bytes_written
#
proxy.process.nntp.server_connections_currently_open CH
proxy.process.rni.block_hit_count
# doc: total # of rni block hits
# units: blocks
# usage: counter
# scale: 10000000
# perfmonvar: total_rni_block_hit_count
#
proxy.process.rni.block_miss_count
# doc: total # of rni block misses
# units: blocks
# usage: counter
# scale: 10000000
# perfmonvar: total_rni_block_miss_count
#
proxy.process.rni.byte_hit_sum
# doc: total # of rni bytes hit
# units: bytes
# usage: counter
# scale: 1000000000
# perfmonvar: total_rni_byte_hit_sum
#
proxy.process.rni.byte_miss_sum
# doc: total # of rni bytes missed
# units: bytes
# usage: counter
# scale: 1000000000
# perfmonvar: total_rni_byte_miss_sum
#
proxy.process.rni.current_client_connections
# doc: current # of open rni client connections
# units: connections
# usage: gauge
# scale: 200
# perfmonvar: current_rni_client_connections
#
proxy.process.rni.current_server_connections
# doc: current # of open rni server connections
# units: connections
# usage: gauge
# scale: 200
# perfmonvar: current_rni_server_connections
#
proxy.process.rni.downstream.request_bytes
# doc: total # of rni downstream request byte
# units: bytes
# usage: counter
# scale: 10000000
# perfmonvar: total_rni_downstream_request_bytes
#
proxy.process.rni.downstream.response_bytes
# doc: total # of rni downstream response byte
# units: bytes
# usage: counter
# scale: 1000000000
# perfmonvar: total_rni_downstream_response_bytes
#
proxy.process.rni.downstream_requests
# doc: total # of rni downstream requests
# units: transactions
# usage: counter
# scale: 10000000
# perfmonvar: total_rni_downstream_requests
#
proxy.process.rni.object_count
# doc: total # of rni objects served
# units: objects
# usage: counter
# scale: 100000
# perfmonvar: total_rni_object_count
#
proxy.process.rni.upstream.request_bytes
# doc: total # of rni upstream request byte
# units: bytes
# usage: counter
# scale: 10000000
# perfmonvar: total_rni_upstream_request_bytes
#
proxy.process.rni.upstream.response_bytes
# doc: total # of rni upstream response byte
# units: bytes
# usage: counter
# scale: 1000000000
# perfmonvar: total_rni_upstream_response_bytes
#
proxy.process.rni.upstream_requests
# doc: total # of rni upstream requests
# units: transactions
# usage: counter
# scale: 10000000
# perfmonvar: total_rni_upstream_requests
#
# html/cache.stats.ink
proxy.process.cache.bytes_total CH
# doc: Total number of bytes devoted to the cache
# units: bytes
# usage: gauge
# scale: 100000000
# perfmonvar: cache_bytes_total
proxy.process.cache.bytes_used CH
# doc: Number of bytes currently used by cache
# units: bytes
# usage: gauge
# scale: 100000000
# perfmonvar: cache_bytes_used
proxy.process.cache.lookup.active
# doc: Number of cache lookup operations active
# doc: # of cache lookup ops active
# units: operations
# usage: gauge
# scale: 100
# perfmonvar: cache_lookup_active
proxy.process.cache.lookup.failure
# doc: Number of cache lookup operations that failed
# shortdoc: # of cache lookup ops that failed
# units: operations
# usage: counter
# scale: 1000
# perfmonvar: cache_lookup_failure
proxy.process.cache.lookup.success
# doc: Number of cache lookup operations that succeeded
# shortdoc: # of cache lookup ops succeeded
# units: operations
# usage: counter
# scale: 1000
# perfmonvar: cache_lookup_success
proxy.process.cache.read.active
# doc: Number of cache read operations active
# shortdoc: # of cache read ops active
# units: operations
# usage: gauge
# scale: 100
# perfmonvar: cache_read_active
proxy.process.cache.read.failure
# doc: Number of cache read operations that failed
# shortdoc: # of cache read ops failed
# units: operations
# usage: counter
# scale: 1000
# perfmonvar: cache_read_failure
proxy.process.cache.read.success
# doc: Number of cache read operations that succeeded
# shortdoc: # of cache read ops succeeded
# units: operations
# usage: counter
# scale: 1000
# perfmonvar: cache_read_success
proxy.process.cache.remove.active
# doc: Number of cache remove operations active
# shortdoc: # of cache remove ops active
# units: operations
# usage: gauge
# scale: 100
# perfmonvar: cache_remove_active
proxy.process.cache.remove.failure
# doc: Number of cache remove operations that failed
# shortdoc: # of cache remove ops failed
# units: operations
# usage: counter
# scale: 1000
# perfmonvar: cache_remove_failure
proxy.process.cache.remove.success
# doc: Number of cache remove operations that succeeded
# shortdoc: # of cache remove ops succeeded
# units: operations
# usage: counter
# scale: 1000
# perfmonvar: cache_remove_success
proxy.process.cache.update.active
# doc: Number of cache update operations active
# shortdoc: # of cache update ops active
# units: operations
# usage: gauge
# scale: 100
# perfmonvar: cache_update_active
proxy.process.cache.update.failure
# doc: Number of cache update operations that failed
# shortdoc: # of cache update ops failed
# units: operations
# usage: counter
# scale: 1000
# perfmonvar: cache_update_failure
proxy.process.cache.update.success
# doc: Number of cache update operations that succeeded
# shortdoc: # of cache update ops succeeded
# units: operations
# usage: counter
# scale: 1000
# perfmonvar: cache_update_success
proxy.process.cache.write.active
# doc: Number of cache write operations active
# shortdoc: # of cache write ops active
# units: operations
# usage: gauge
# scale: 100
# perfmonvar: cache_write_active
proxy.process.cache.write.failure
# doc: Number of cache write operations that failed
# shortdoc: # of cache write ops failed
# units: operations
# usage: counter
# scale: 1000
# perfmonvar: cache_write_failure
proxy.process.cache.write.success
# doc: Number of cache write operations that succeeded
# shortdoc: # of cache write ops succeeded
# units: operations
# usage: counter
# scale: 1000
# perfmonvar: cache_write_success
#
# html/misc.stats.ink
proxy.process.cluster.connections_open
# doc: Total number of intracluster connections currently open
# units: connections
# usage: gauge
# scale: 10
# perfmonvar: total_cluster_conn_open
#
proxy.process.cluster.connections_opened
# doc: Total number of intracluster connections opened since installation
# units: connections
# usage: counter
# scale: 1000
# perfmonvar: total_cluster_conn_opened
#
proxy.process.cluster.net_backup
# doc: # of proxy-only due to cluster congestion
# units: events
# usage: counter
# scale: 1000
# perfmonvar: cluster_net_backup
#
proxy.process.cluster.nodes
# doc: # of nodes in cluster
# units: nodes
# usage: gauge
# scale: 10
# perfmonvar: cluster_nodes
#
proxy.process.cluster.read_bytes
# doc: # of bytes read from other nodes in cluster
# units: bytes
# usage: counter
# scale: 10000000
# perfmonvar: cluster_read_bytes
#
proxy.process.cluster.write_bytes
# doc: # of bytes written to other nodes in cluster
# units: bytes
# usage: counter
# scale: 10000000
# perfmonvar: cluster_write_bytes
#
proxy.process.dns.lookup_avg_time CHM
proxy.process.dns.lookup_successes
# usage: counter
# units: operations
# scale: 10000
# doc: total # of successful DNS lookups
# perfmonvar: total_dns_lookup_successes
#
proxy.process.dns.total_dns_lookups 
# usage: counter
# units: operations
# scale: 10000
# doc: total # of DNS lookups
# perfmonvar: total_dns_lookups
#
proxy.process.hostdb.total_hits
# usage: counter
# units: operations
# scale: 10000
# doc: total # of HostDB lookup hits
# perfmonvar: total_hostdb_hits
#
proxy.process.hostdb.total_lookups
# usage: counter
# units: operations
# scale: 10000
# doc: total # of HostDB lookups
# perfmonvar: total_hostdb_lookups
#
proxy.process.hostdb.ttl
# usage: gauge
# units: minutes
# scale: 10000
# doc: average TTL of HostDB entries (minutes)
# perfmonvar: hostdb_ttl
#
proxy.process.log2.event_log_access
# usage: counter
# units: events
# scale: 100000
# doc: The current number of access events that have been written to log files. This counter represents one entry in one file, so that if multiple formats are being written, a single access will create multiple access event log entries.
# shortdoc: # of events written to log files
# perfmonvar: log2_event_log_access
#
proxy.process.log2.event_log_access_skip
# usage: counter
# units: events
# scale: 100000
# doc: # of events skipped instead of written to log files
# shortdoc: # of events not written to log files
# perfmonvar: log2_event_log_access_skip
#
proxy.process.log2.event_log_error
# usage: counter
# units: events
# scale: 100000
# doc: # of events written to error log
# perfmonvar: log2_event_log_error
#
proxy.process.log2.log_files_open
# usage: gauge
# units: files
# scale: 10
# doc: How many access log files (formats) are currently being written
# shortdoc: # of log files being written to
# perfmonvar: log2_log_files_open
#
proxy.process.log2.log_files_space_used
# usage: gauge
# units: bytes
# scale: 1000000
# doc: The current amount of space being used by the logging directory, which contains all of the access and error logs
# shortdoc: # of bytes used by logging directory
# perfmonvar: log2_log_files_space_used
#
proxy.process.socks.connections_currently_open
# usage: gauge
# units: connections
# scale: 1000
# doc: Number of SOCKS connections in progress
# shortdoc: # of SOCKS conn in progress
# perfmonvar: cur_socks_conn_open
#
proxy.process.socks.connections_successful
# usage: counter
# units: connections
# scale: 1000
# doc: Number of successful SOCKS connections in progress
# shortdoc: # of successful SOCKS conn
# perfmonvar: total_socks_conn_successful
#
proxy.process.socks.connections_unsuccessful
# usage: counter
# units: connections
# scale: 1000
# doc: Number of unsuccessful SOCKS connections in progress
# shortdoc: # of unsuccessful SOCKS conn
# perfmonvar: total_socks_conn_unsuccessful
#
#these are generated in manager and should be present in MIB:
proxy.node.client_throughput_out_kbit M
proxy.cluster.client_throughput_out_kbit M
proxy.node.bandwidth_hit_ratio_int_pct MP
# derived: proxy.node.bandwidth_hit_ratio * 100
# doc: The ratio of bytes served from the cache to total requested bytes (HTTP and FTP) since installation).
# shortdoc: % FTP/HTTP bytes served from cache
# units: %
# scale: 100
# usage: gauge
# perfmonvar: bw_hit_ratio
proxy.cluster.bandwidth_hit_ratio_int_pct MP
# derived: proxy.cluster.bandwidth_hit_ratio * 100
# doc: The ratio of bytes served from the cache to total requested bytes (HTTP and FTP) since installation).
# shortdoc: % FTP/HTTP bytes srvd frm cache (cluster)
# units: %
# scale: 100
# usage: gauge
# perfmonvar: cluster_bw_hit_ratio
proxy.node.cache_hit_ratio_int_pct MP
# derived: proxy.node.cache_hit_ratio * 100
# units: %
# scale: 100
# usage: gauge
# perfmonvar: cache_hit_ratio
proxy.cluster.cache_hit_ratio_int_pct MP
# derived: proxy.cluster.cache_hit_ratio * 100
# units: %
# scale: 100
# usage: gauge
# perfmonvar: cluster_cache_hit_ratio
proxy.node.http.cache_hit_ratio_int_pct MP
# derived: proxy.node.http.cache_hit_ratio * 100
# units: %
# scale: 100
# usage: gauge
# perfmonvar: http_cache_hit_ratio
proxy.cluster.http.cache_hit_ratio_int_pct MP
# derived: proxy.cluster.http.cache_hit_ratio * 100
# units: %
# scale: 100
# usage: gauge
# perfmonvar: cluster_http_cache_hit_ratio
proxy.node.http.bandwidth_hit_ratio_int_pct MP
# derived: proxy.node.http.bandwidth_hit_ratio * 100
# units: %
# scale: 100
# usage: gauge
# perfmonvar: node_http_bw_hit_ratio
proxy.cluster.http.bandwidth_hit_ratio_int_pct MP
# derived: proxy.cluster.http.bandwidth_hit_ratio * 100
# units: %
# scale: 100
# usage: gauge
# perfmonvar: cluster_http_bw_hit_ratio
proxy.node.cache.percent_free_int_pct MP
# derived: proxy.node.cache.percent_free * 100
# units: %
# scale: 100
# usage: gauge
# perfmonvar: cache_pct_free
proxy.cluster.cache.percent_free_int_pct MP
# derived: proxy.cluster.cache.percent_free * 100
# units: %
# scale: 100
# usage: gauge
# perfmonvar: cluster_cache_pct_free
proxy.cluster.cache.bytes_free_mb M
proxy.node.cache.bytes_total_mb M
proxy.cluster.hostdb.hit_ratio_int_pct M
proxy.node.http.transaction_frac_avg_10s.errors.aborts_int_pct M
proxy.node.http.transaction_frac_avg_10s.errors.connect_failed_int_pct M
proxy.node.http.transaction_frac_avg_10s.errors.early_hangups_int_pct M
proxy.node.http.transaction_frac_avg_10s.errors.empty_hangups_int_pct M
proxy.node.http.transaction_frac_avg_10s.errors.other_int_pct M
proxy.node.http.transaction_frac_avg_10s.errors.possible_aborts_int_pct M
proxy.node.http.transaction_frac_avg_10s.errors.pre_accept_hangups_int_pct M
proxy.node.http.transaction_frac_avg_10s.hit_fresh_int_pct M
proxy.node.http.transaction_frac_avg_10s.hit_revalidated_int_pct M
proxy.node.http.transaction_frac_avg_10s.miss_changed_int_pct M
proxy.node.http.transaction_frac_avg_10s.miss_client_no_cache_int_pct M
proxy.node.http.transaction_frac_avg_10s.miss_cold_int_pct M
proxy.node.http.transaction_frac_avg_10s.miss_not_cacheable_int_pct M
proxy.node.http.transaction_frac_avg_10s.other.unclassified_int_pct M
#
proxy.process.wmt.downstream.request_bytes
# doc: total # of wmt downstream request byte
# units: bytes
# usage: counter
# scale: 1000000000
# perfmonvar: total_wmt_downstream_request_bytes
#
proxy.process.wmt.downstream.response_bytes
# doc: total # of wmt downstream response byte
# units: bytes
# usage: counter
# scale: 10000000
# perfmonvar: total_wmt_downstream_response_bytes
#
proxy.process.wmt.upstream.request_bytes
# doc: total # of wmt upstream request byte
# units: bytes
# usage: counter
# scale: 10000000
# perfmonvar: total_wmt_upstream_request_bytes
#
proxy.process.wmt.upstream.response_bytes
# doc: total # of wmt upstream response byte
# units: bytes
# usage: counter
# scale: 1000000000
# perfmonvar: total_wmt_upstream_response_bytes
#
proxy.process.wmt.current_client_connections
# doc: current # of open wmt client connections
# units: connections
# usage: gauge
# scale: 200
# perfmonvar: current_wmt_client_connections
#
proxy.process.wmt.current_server_connections
# doc: current # of open wmt server connections
# units: connections
# usage: gauge
# scale: 200
# perfmonvar: current_wmt_server_connections
#
proxy.process.qt.current_unique_live_streams
# doc: current # of open unique live streams connection
# units: connections
# usage: gauge
# scale: 200
# perfmonvar: current_qt_unique_live_streams
#
proxy.process.qt.client.server_bytes_read
# doc: total # of bytes from from origin server
# units: bytes
# usage: counter
# scale: 1000000000
# perfmonvar: total_qt_server_bytes_read
#
proxy.process.qt.client.cache_bytes_read
# doc: total # of bytes read from cache
# units: bytes
# usage: counter
# scale: 1000000000
# perfmonvar: total_qt_cache_bytes_read
#
proxy.process.qt.downstream.request_bytes
# doc: total # of qt downstream request byte
# units: bytes
# usage: counter
# scale: 1000000000
# perfmonvar: total_qt_downstream_request_bytes
#
proxy.process.qt.downstream.response_bytes
# doc: total # of qt downstream response byte
# units: bytes
# usage: counter
# scale: 10000000
# perfmonvar: total_qt_downstream_response_bytes
#
proxy.process.qt.upstream.request_bytes
# doc: total # of qt upstream request byte
# units: bytes
# usage: counter
# scale: 10000000
# perfmonvar: total_qt_upstream_request_bytes
#
proxy.process.qt.upstream.response_bytes
# doc: total # of qt upstream response byte
# units: bytes
# usage: counter
# scale: 1000000000
# perfmonvar: total_qt_upstream_response_bytes
#
proxy.process.qt.current_client_connections
# doc: current # of open qt client connections
# units: connections
# usage: gauge
# scale: 200
# perfmonvar: current_qt_client_connections
#
proxy.process.qt.current_server_connections
# doc: current # of open qt server connections
# units: connections
# usage: gauge
# scale: 200
# perfmonvar: current_qt_server_connections
#
proxy.process.cache.read_per_sec
# doc: current # of cache read operations
# units: read/sec
# usage: gauge
# scale: 1000
# perfmonvar: proxy_process_cache_read_per_sec
#
proxy.process.cache.write_per_sec
# doc: current # of cache write operations
# units: write/sec
# usage: gauge
# scale: 50
# perfmonvar: proxy_process_cache_write_per_sec
#
proxy.process.cache.KB_read_per_sec
# doc: current # of KB read from cache
# units: KB read/sec
# usage: gauge
# scale: 10000
# perfmonvar: proxy_process_cache_KB_read_per_sec
#
proxy.process.cache.KB_write_per_sec
# doc: current # of KB write from cache
# units: KB write/sec
# usage: gauge
# scale: 10000
# perfmonvar: proxy_process_cache_KB_write_per_sec
#

